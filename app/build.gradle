/*
 * OAndBackupX: open-source apps backup and restore app.
 * Copyright (C) 2020  Antonios Hazim
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

android {

    signingConfigs {
        hg42test {
            storeFile file('/z/src/android/sign-zip/hg42.keystore')
            storePassword 'hg42pwd'
            keyAlias 'cert'
            keyPassword 'hg42pwd'
        }
    }

    compileSdkVersion 30

    //publishNonDefault true

    defaultConfig {
        applicationId 'com.machiav3lli.backup'
        versionCode = "500${versionAge}".toInteger()
        versionName = "5.0.0.${versionString}"
        minSdkVersion 26
        targetSdkVersion 30
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString(),
                             "room.incremental":"true"]
            }
        }
        println("\n---------- version code: ${android.defaultConfig.versionCode} name: ${android.defaultConfig.versionName}\n\n")
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.hg42test
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.hg42test
        }
        applicationVariants.all { variant ->
            //def buildType = variant.buildType.name
            //println "buildType: $buildType"
            //if (buildType == "debug") {
            //    // do stuff
            //}
            variant.outputs.all { output ->
                //outputFileName = "oabx-${variant.versionName}-${gitVersion.branchName}${variant.buildType.name=="debug"?"-debug":""}.apk"
                outputFileName = "oabx-${versionString}${variant.buildType.name=="debug"?"-debug":""}.apk"
                if(variant.buildType.name=="release")
                    println("--> $outputFileName")
            }
        }
    }

    flavorDimensions 'version'
    productFlavors {
        hg42 {
            dimension 'version'
            applicationIdSuffix '.hg42'
            versionNameSuffix '-hg42'
            signingConfig signingConfigs.hg42test
        }
        /*
        neo {
            applicationIdSuffix '.neo'
            versionNameSuffix '-neo'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        */
    }

    buildFeatures {
        dataBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }
    lintOptions {
        abortOnError false
    }
}

ext {
    versions = [
            kotlin            : "1.4.20",
            room              : "2.2.5",
            work              : "2.4.0",
            gson              : "2.8.6",
            lifecycle         : "2.2.0",
            biometric         : "1.0.1",
            commons_compress  : "1.20",
            commons_io        : "2.8.0",
            libsu             : "3.0.2",
            rootBeer          : '0.0.8',

            appcompat         : "1.2.0",
            fragment          : "1.2.5",
            material          : "1.3.0-alpha03",
            preference        : "1.1.1",
            swiperefreshlayout: "1.1.0",
            navigation        : "2.3.1",
            fastadapter       : "5.3.0",

            androidx_test     : "1.3.0",
            junit             : "4.13",
            junitx            : "1.1.2",
            espresso          : "3.3.0"
    ]
}

dependencies {
    //releaseCompile project(path: ':app', configuration: 'release')
    //debugCompile project(path: ':app', configuration: 'debug')

    // Libs
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
    implementation "androidx.room:room-runtime:${versions.room}"
    implementation "androidx.room:room-ktx:${versions.room}"
    implementation "androidx.work:work-runtime-ktx:${versions.work}"
    kapt "androidx.room:room-compiler:${versions.room}"
    implementation "com.google.code.gson:gson:${versions.gson}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}"
    implementation "androidx.biometric:biometric:${versions.biometric}"
    implementation "org.apache.commons:commons-compress:${versions.commons_compress}"
    implementation "commons-io:commons-io:${versions.commons_io}"
    implementation "com.github.topjohnwu.libsu:core:${versions.libsu}"
    implementation "com.github.topjohnwu.libsu:io:${versions.libsu}"
    implementation "com.scottyab:rootbeer-lib:${versions.rootBeer}"

    // UI
    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    implementation "androidx.fragment:fragment-ktx:${versions.fragment}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "androidx.preference:preference-ktx:${versions.preference}"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${versions.swiperefreshlayout}"
    implementation "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.navigation}"
    implementation "com.mikepenz:fastadapter:${versions.fastadapter}"
    implementation "com.mikepenz:fastadapter-extensions-diff:${versions.fastadapter}"
    implementation "com.mikepenz:fastadapter-extensions-binding:${versions.fastadapter}"

    // Tests
    implementation "androidx.test:rules:${versions.androidx_test}"
    testImplementation "junit:junit:${versions.junit}"
    androidTestImplementation "androidx.test.ext:junit:${versions.junitx}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"
}
